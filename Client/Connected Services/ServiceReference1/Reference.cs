//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Calculator", Namespace="http://schemas.datacontract.org/2004/07/Contracts")]
    [System.SerializableAttribute()]
    public partial class Calculator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int tpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int x1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int y1Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int tp {
            get {
                return this.tpField;
            }
            set {
                if ((this.tpField.Equals(value) != true)) {
                    this.tpField = value;
                    this.RaisePropertyChanged("tp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int x1 {
            get {
                return this.x1Field;
            }
            set {
                if ((this.x1Field.Equals(value) != true)) {
                    this.x1Field = value;
                    this.RaisePropertyChanged("x1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int y1 {
            get {
                return this.y1Field;
            }
            set {
                if ((this.y1Field.Equals(value) != true)) {
                    this.y1Field = value;
                    this.RaisePropertyChanged("y1");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.artech.com/", ConfigurationName="ServiceReference1.CalculatorService")]
    public interface CalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/AddExy", ReplyAction="http://www.artech.com/CalculatorService/AddExyResponse")]
        Client.ServiceReference1.Calculator AddExy(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/AddExy", ReplyAction="http://www.artech.com/CalculatorService/AddExyResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> AddExyAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/Subtract", ReplyAction="http://www.artech.com/CalculatorService/SubtractResponse")]
        Client.ServiceReference1.Calculator Subtract(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/Subtract", ReplyAction="http://www.artech.com/CalculatorService/SubtractResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> SubtractAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/Multiply", ReplyAction="http://www.artech.com/CalculatorService/MultiplyResponse")]
        Client.ServiceReference1.Calculator Multiply(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/Multiply", ReplyAction="http://www.artech.com/CalculatorService/MultiplyResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> MultiplyAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/Divide", ReplyAction="http://www.artech.com/CalculatorService/DivideResponse")]
        Client.ServiceReference1.Calculator Divide(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.artech.com/CalculatorService/Divide", ReplyAction="http://www.artech.com/CalculatorService/DivideResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> DivideAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CalculatorServiceChannel : Client.ServiceReference1.CalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<Client.ServiceReference1.CalculatorService>, Client.ServiceReference1.CalculatorService {
        
        public CalculatorServiceClient() {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ServiceReference1.Calculator AddExy(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.AddExy(x, y);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> AddExyAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.AddExyAsync(x, y);
        }
        
        public Client.ServiceReference1.Calculator Subtract(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.Subtract(x, y);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> SubtractAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.SubtractAsync(x, y);
        }
        
        public Client.ServiceReference1.Calculator Multiply(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.Multiply(x, y);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> MultiplyAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.MultiplyAsync(x, y);
        }
        
        public Client.ServiceReference1.Calculator Divide(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.Divide(x, y);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Calculator> DivideAsync(Client.ServiceReference1.Calculator x, Client.ServiceReference1.Calculator y) {
            return base.Channel.DivideAsync(x, y);
        }
    }
}
